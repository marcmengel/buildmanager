# build product area

#defaults
set product "demo"
set version "v2_0"
set releasetarget "kits"

proc productroot { flavor } {
    global product version

    return "/tmp/${product}-${version}-${flavor}"
}

#
# A more complicated example would be something like:
#
# proc productroot { flavor } {
#     global product version
#     if { $product == "fred" && $version != "v9_17" } {
#         return "/tmp/special/fred/$version"
#     } elsif { $product == "joe" && [string match $flavor "IRIX*"] } {
#         return "/tmp/IRIXjunk/$version"
#     } else {
#         return "/tmp/${product}-${version}-${flavor}"
#     }
# }
#

# regexp to match a prompt -- something ending with a > % $ # or ? 
# followed by a blank.
set promptre {[>$%#?] $}

# regexp to match a "set -x" echo-ed make command
set makestartre  "\\+ +make(\[^\n\r\]+)\[\n\r\]"

# regexp to match a failed make
set makefailre	 {[Mm]ake:.*error|don't know how|Stop.|\*\*\* Error code}

# operating systems to run on
set os_dat(LIST)  {OSF1+V3 OSF1+V4 IRIX+5 IRIX+6 SunOS+5 AIX+3 AIX+4}
# set os_dat(LIST)  {OSF1+V3 IRIX+5 SunOS+5 AIX+3}

# hosts for each operating system
set os_dat(HOST,AIX+3)	 unknown
set os_dat(HOST,AIX+4)	 unknown
set os_dat(HOST,IRIX+5)	 unknown
set os_dat(HOST,IRIX+6)	 unknown
set os_dat(HOST,OSF1+V3) unknown
set os_dat(HOST,OSF1+V4) unknown
set os_dat(HOST,SunOS+5) unknown

# path additions for each system , so we can find compilers, X libraries
# etc.
set os_dat(PATH,AIX+3)   "/usr/bin/X11:/usr/lpp/X11/Xamples/bin"
set os_dat(PATH,AIX+4)   "/usr/bin/X11:/usr/lpp/X11/Xamples/bin"
set os_dat(PATH,IRIX+5)  "/usr/X11/bin:/usr/bsd:/usr/ccs/bin"
set os_dat(PATH,IRIX+6)  "/usr/X11/bin:/usr/ccs/bin"
set os_dat(PATH,SunOS+5) "/opt/SUNWspro/bin:/bin:/usr/bin:/usr/ccs/bin:/usr/ucb:/usr/openwin/bin"


#
# Environment variables to pass in
#
set os_dat(ENVVARS)	{DISPLAY CVSROOT DPRODUCTS}

#
# some items to make life easier
# -- standardize erase character, since we controll what backspace/del
#    keys do
# -- make shell functions for screen editors that launch an xterm
# -- setup so setups work
#
set os_dat(COMMANDS)	{
	{stty erase '^?'}
	{vi() { xterm -e vi "$@"; } }
	{edt() { xterm -e edt  "$@"; } }
	{. /usr/local/etc/setpath.sh; . /usr/local/etc/setups.sh}
	{setup cvs} 
	{PRODUCTS="$DPRODUCTS $PRODUCTS"; export PRODUCTS}
}

set os_dat(PLAT_COMMANDS,SunOS+5) {
	{OPENWINHOME="/usr/openwin/bin"; export OPENWINHOME}
}

set cmd_menu(1\ cd)	 	  {cmd_parallel  "cd %D"}
set cmd_menu(2\ cvs\ checkout) 	  {cmd_parallel  "cd %d; cvs checkout -r %V -d %T %P" }
set cmd_menu(3\ make\ declare)	  {cmd_taketurns "(cd %D; make declare)"}
set cmd_menu(4\ setup)		  {cmd_parallel  "set +x; setup -b -f %F %P %V; set -x"}
set cmd_menu(5\ make\ all)	  {cmd_parallel  "(cd %D; make all)"}
set cmd_menu(6\ make\ test)	  {cmd_parallel  "(cd %D; make test)"}
set cmd_menu(7\ make\ local|kits) {cmd_parallel  "(cd %D; make %R)"}
set cmd_menu(8\ make\ clean)	  {cmd_parallel  "(cd %D; make clean)"}
set cmd_menu(9\ cvs\ release)	  {cmd_parallel  "cd %d; cvs release -d %T"}
set cmd_menu(exit) 		  {cmd_parallel  "exit"; after 5000 exit}
