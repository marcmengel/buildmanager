#!/usr/bin/env tclsh

package require Expect
package require Tk


set connect_command /usr/bin/ssh

set hwcount 0
set sessionlist {}
set loginok 0
set bwcount 0

set logname $env(USER)

proc updateflavorbuttons { w w2 } {
    global host_dat bwcount

    set row 0
    set col 1
    foreach host $host_dat(LIST) {
        incr bwcount
        set bw $w.b_$bwcount

        if { ![info exists host_dat(h2bw,$host)] } {
	    checkbutton $bw -text "$host" \
		    -variable "host_dat(do,$host)" \
		    -selectcolor green \
		    -width 12
	    set host_dat(h2bw,$host) $bw
	}
	grid configure $bw -column $col -row $row -sticky e
	set col [expr $col + 1]
        if { $col > 6 } {
           set row [expr $row + 1]
           set col 1
        }
    }
}

proc updatehostwindows { w } {
    global host_dat sw_dat os_dat
    global hwcount
    global loginok

    # skip if we don't have passwords, etc. yet

    if { ! $loginok } {
	return
    }
    set newsessions {}

    foreach host $host_dat(LIST) {
        set flavor $host_dat(h2f,$host)
        incr hwcount
	set hw $w.h_$hwcount

	# if we should be doing this host, but arent, add a window
	# for it

	if { $host_dat(do,$host) && ![info exists host_dat(h2w,$host)]} {
	    set host_dat(h2w,$host) $hw
	    set host_dat(w2h,$hw) $host
	    set os_dat(w2f,$hw) $flavor

	    sessionwin $hw $host
	    pack $hw -expand 1 -fill both -side top

	    set s $sw_dat(w2s,$hw)
	    set os_dat(s2f,$s) $flavor
	    $hw.l4 configure -text "$flavor"
	    lappend newsessions $s
	}

	# if we are doing this host, but shoudn't be anymore,
	# drop the session

	if { !$host_dat(do,$host) && [info exists host_dat(h2w,$host)]} {
	    drop_session $sw_dat(w2s,$host_dat(h2w,$host))
	}
    }

    # log in any new sessions

    newloginsessions $newsessions
}

proc drop_session { s } {
    global sessionlist sw_dat os_dat host_dat

    catch {
	set w $sw_dat(s2w,$s)
	set host $host_dat(w2h,$w)
	set host_dat(do,$host) 0
	unset host_dat(w2h,$w)
	unset host_dat(h2w,$host)
	destroy $w
    } res1
    catch {
	set index [lsearch -exact $sessionlist $s]
	set sessionlist [lreplace $sessionlist $index $index]
    } res2
    return [llength $sessionlist]
}

# ----------------------------------------------------------------------
# mainline...
# ----------------------------------------------------------------------

proc init {} {
    global argv env spawn_id history histslot expect_out pending2
    global os_dat sw_dat host_dat
    global promptre product version 
    global debug_state

    if { "[lindex $argv 0]" == "-?" } {
	puts {usage: buildmanager [-v] [-h host_list_file] [product version]}
        exit 0
    }
       
    if { [lindex $argv 0] == "-debug_state" } {
	set argv [lrange $argv 1 end]
	set debug_state 1
    } else {
	set debug_state 0
    }

    if { "[lindex $argv 0]" == "-v" } {
	set argv [lrange $argv 1 end]
    } else {
	log_user 0
    }

    cmd_return_takesturns
    getconfiginfo


    if { "[lindex $argv 0]" == "-h" } {
  	file_change_hosts [lindex $argv 1]
	set argv [lrange $argv 2 end]
    }

    # remaining args must be product, version.

    if { [llength $argv ] > 0} {
	set product [lindex $argv 0]
    } 
    if { [llength $argv ] > 1} {
	set version [lindex $argv 1]
    }
    # puts "product $product version $version"

    set history {}
    set histslot 0

    menubar_gui .menubar
    fill_in_cmd_menu .menubar
    customcmd_gui .cmd
    frame .flavors
    vscrollframe .hosts

    pack .menubar .cmd .flavors -side top -expand 0 -fill x -anchor e
    pack .hosts -side top -expand 1 -fill both

    button .flavors.update -text "Update" \
		    -command {updatehostwindows .hosts.f}
    grid configure .flavors.update -row 0 -column 0
    updateflavorbuttons .flavors .hosts.f
    getlogininfo "Initial login"
    update
    updatehostwindows .hosts.f
    update
}


proc expect_loop {} {
    global argv env spawn_id history histslot expect_out pending2
    global os_dat sw_dat
    global promptre cmdstartre cmdfailre cmdnevermindre questionre
    global allwatchre
    global sessionlist
    global debug_state

    set outputlines 0
    expect {
	-i sessionlist -re "\[^\r\]+" {
            incr outputlines 
	    if { $outputlines % 8  == 0 } { update }
	    if { [regexp $allwatchre $expect_out(0,string)] } {

	    # puts "match allwatchere: $expect_out(0,string)"

	    if { [regexp $cmdstartre $expect_out(0,string) match cmd args] } {
		set s $expect_out(spawn_id)

		if $debug_state {
		    puts "saw command start string:"
		    puts "$expect_out(0,string)"
		}

		#set cmd  $expect_out(1,string)
		#set args $expect_out(2,string)

		if { [ regexp { ([^- =]+) } $args match first ] || 
			    [ regexp { ([^- =]+)$} $args match first ] } {
		     # if we have an argument with no dashes or equals...
		     set target $first
		} else {
		     set target "all"
		}
		if { ![info exists pending2($s)] || ![regexp -- {-make-} $pending2($s)]} {
		    update_state "$cmd-$target"
		    set pending2($s) "update_state \"$cmd-$target-OK\""
		} else {
		    update_bytes
		}
		exp_continue
	    } elseif { [regexp $cmdfailre $expect_out(0,string)] } {
	    # -i sessionlist -re $cmdfailre {}
		set s $expect_out(spawn_id)
		if { [info exists pending2($s)] } {
		    if $debug_state {
			puts "I think $pending2($s) failed because I saw:"
			puts "$expect_out(0,string)"
		    }
	            if {[regexp $cmdnevermindre $expect_out(0,string)] } {
		      regsub -- {-Failed} $pending2($s) {-OK} pending2($s)
		    } else {
		      regsub -- {-OK} $pending2($s) {-Failed} pending2($s)
		    }
		}
		update_bytes
		exp_continue
	    } else { 
		update_bytes
		exp_continue
            }
          } elseif { [regexp $questionre $expect_out(0,string)] } {
		set s $expect_out(spawn_id)
		if { [info exists pending2($s)] } {
		    set state $sw_dat(state,$s)
		    setstatus $s Question
		    if [regexp {(.*-Question-)([0-9]+)$} $state match pre num] {
			update_state "${pre}[expr $num + 1]"
		    } else {
			update_state "${state}-Question-1"
		    }
		} else {
		    update_status Question
		}
	        exp_continue
	  } elseif { [regexp $promptre $expect_out(0,string)] } {
		set s $expect_out(spawn_id)
		update_status Ready
		set outputlines 0
		exp_continue
	  } else {
	        update_bytes
	        exp_continue
   	  }
        }
	-i sessionlist -re "\[\r\n\]+" {
	    update_status Running
	    exp_continue
	}
	-i sessionlist timeout {
	    flush_sent $sw_dat(s2w,$expect_out(spawn_id))
	    flush_rcvd $sw_dat(s2w,$expect_out(spawn_id))
	    exp_continue
	}
	-i sessionlist eof {
	    if [drop_session $expect_out(spawn_id)] exp_continue
	}
    }
}

proc main {} {
    global env
    global dir
    global auto_path

    if { [info exists env(BUILDMANAGER_DIR)] } {
	 set dir $env(BUILDMANAGER_DIR)
    } else {
	 set dir .
    }

    match_max -d 160

    source ${dir}/lib/buildmanager/passwd_popup.tcl
    
    lappend auto_path ${dir}/lib/buildmanager

    # make backspace and delete identical in entry widgets
    # make Control-U delete from here to front
    bind Entry <Delete> [bind Entry <BackSpace>]
    bind Entry <Control-U> {%w delete 0 insert}

    init 

    while [ catch expect_loop result] {
	update
	error_dialog expect_loop $result 
    }
    exit
}

main
